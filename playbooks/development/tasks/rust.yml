---
- name: Download rustup installer-script
  get_url:
    url: https://sh.rustup.rs
    dest: /home/kevin/.tmp/rustup-install.sh
    mode: 0740

- name: Install rustup
  shell: "/home/kevin/.tmp/rustup-install.sh -y"
  args:
    creates: /home/kevin/.cargo
    executable: sh

- name: Source the Cargo ENV files
  shell: source /home/kevin/.cargo/env
  args:
    executable: /bin/bash

- name: Add Rust to $PATH (FISH)
  lineinfile:
    path: "/home/kevin/.config/fish/config.fish"
    line: "set -gx PATH /home/kevin/.cargo/bin $PATH"
  when:
    - component_fish

- name: Add Rust to $PATH (ZSH)
  lineinfile:
    path: "/home/kevin/.zshrc"
    line: "export PATH=$HOME/.cargo/bin:$PATH"
  when:
    - component_zsh

- name: Set Rust Default Toolchain to Nightly
  shell: "/home/kevin/.cargo/bin/rustup default nightly"
  ignore_errors: yes

  # TODO double check that this default applies to user and not root

- name: Install the additional rust components
  command: "/home/kevin/.cargo/bin/rustup component add {{ item }}"
  ignore_errors: yes
  with_items:
    - rustfmt
    - clippy
    - rls

- name: Install Required System Packages (Ubuntu)
  become: yes
  become_user: root
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - libssl-dev
    - cmake
    - pkg-config
  when: 
    - ansible_distribution == "Ubuntu"
    - component_rust_cargo_extras

# Maybe split these out?
- name: Install All Cargo Extras (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install {{ item }}"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  with_items: 
    - cargo-update 
    - cargo-outdated 
    - cargo-graph 
    - cargo-geiger 
    - cargo-tree 
    - cargo-modules 
    - cargo-edit 
    - cargo-count 
    - cargo-bloat 
    - cargo-cache 
  when: 
    - component_rust_cargo_extras

- name: Install Ripgrep (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install ripgrep"
  args:
    creates: /home/kevin/.cargo/bin/rg
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  when: 
    - component_rust_ripgrep

- name: Install CW (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install cw"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/cw
  when: 
    - component_rust_cw

- name: Install exa (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install exa"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/exa
  when: 
    - component_rust_exa

- name: Install skim (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install skim"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/sk
  when: 
    - component_rust_skim

- name: Install mdbook (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install mdbook"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/mdbook
  when: 
    - component_rust_mdbook

- name: Install bat (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install bat"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/bat
  when: 
    - component_rust_bat

- name: Install fd-find (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install fd-find"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/fd
  when: 
    - component_rust_fd

- name: Install tokei (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install tokei"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/tokei
  when: 
    - component_rust_tokei

- name: Install clog (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install clog-cli"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/clog
  when: 
    - component_rust_clog

- name: Install hexl (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install hexl"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/hexl
  when: 
    - component_rust_hexl

- name: Install hyperfine (Cargo)
  command: "/home/kevin/.cargo/bin/cargo install hyperfine"
  ignore_errors: yes # Some require nightly, etc. we can also do this later
  args:
    creates: /home/kevin/.cargo/bin/hyperfine
  when: 
    - component_rust_hyperfine

# this will add the line over and over
- name: Copy Rust setting to ZSH profile
  shell: "cat /home/kevin/.dotfiles/zsh/addons/rust.zsh-addon >> /home/kevin/.zshrc"
  when: 
    - component_dotfiles
    - component_zsh

- name: Clone ASCIInema repository
  git:
    repo: https://github.com/LegNeato/asciinema-rs
    dest: /home/kevin/.build/asciinema
  when:
    - component_asciinema

- name: Build the ASCIInema Project
  command: "/home/kevin/.cargo/bin/cargo build --release"
  args:
    chdir: /home/kevin/.build/asciinema
    creates: /home/kevin/.build/asciinema/target/release/asciinema
  when:
    - component_asciinema

- name: Copy the ASCIInema binary to PATH 
  command: "cp /home/kevin/.build/asciinema/target/release/asciinema /home/kevin/.local/bin"
  args:
    creates: /home/kevin/.local/bin/asciinema
  when:
    - component_asciinema